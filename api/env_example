# Example Environment Variables for SkyBlock LXD Manager API

# FastAPI Server (uvicorn will use these if not specified in command line)
# HOST="0.0.0.0"
# PORT="8000"
# LOG_LEVEL="info"

# Database URL
# Replace with your actual database connection string
# For MySQL with aiomysql:
DATABASE_URL="mysql+aiomysql://name:pasworld@localhost:3306/names-db"
# For PostgreSQL with asyncpg:
# DATABASE_URL="postgresql+asyncpg://skyblock_user:skyblock_password@localhost:5432/skyblock_db"
# For SQLite (testing only, not recommended for production with async):
# DATABASE_URL="sqlite+aiosqlite:///./skyblock.db"

# LXD Settings
# Path to the LXD Unix socket.
# For snap installs: /var/snap/lxd/common/lxd/unix.socket
# For deb/apt installs: /var/lib/lxd/unix.socket
LXD_SOCKET_PATH="/var/snap/lxd/common/lxd/unix.socket"
# LXD Project name (if not 'default')
# LXD_PROJECT="default"
# Name of the published LXD image to be used as a template for islands
LXD_BASE_IMAGE="skyblock-template"

# Application Settings
MAX_RUNNING_SERVERS="10"         # Max concurrent running Minecraft server instances
FREEZE_TIMER_SECONDS="300"       # 5 minutes (5 * 60)
STOP_TIMER_SECONDS="900"         # 15 minutes (15 * 60)
CLEANUP_INTERVAL_HOURS="24"      # Check for old islands once a day
MAX_ISLAND_INACTIVITY_DAYS="30"  # Delete islands inactive for this many days

# Default Minecraft server port inside the container
DEFAULT_MC_PORT_INTERNAL="25565"

# API version string (already in config.py but can be environment sourced)
# API_V1_STR="/api/v1"

# Secret key for JWT tokens or other security features (if you add them)
# SECRET_KEY="your_very_secret_and_strong_key_here"

# CORS Origins (if your frontend is on a different domain/port)
# Example: BACKEND_CORS_ORIGINS='["http://localhost", "http://localhost:3000", "https://your.frontend.domain"]'
# This needs to be parsed in main.py if used.
# For permissive local dev (NOT FOR PRODUCTION):
# BACKEND_CORS_ORIGINS='["*"]'

# You can copy this file to .env and fill in your actual values.
# The application (via pydantic-settings in config.py) can load .env automatically.
